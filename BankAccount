class BankAccount implements SignupStrategy, SignInStrategy{
    private List<BankAccountUser> bankUsers;
    private UserVerificationFacade facade;
    private BankAccountUser currentUser; // Track the current user
    private Scanner scanner;

    public BankAccount(List<BankAccountUser> bankUsers) {
        this.bankUsers = bankUsers;
        this.scanner = new Scanner(System.in);
    }

    @Override
    public void setVerificationFacade(UserVerificationFacade facade) {
        this.facade = facade;
    }

    @Override
    public void signup() {
        boolean isUsernameUnique = false;

        while (!isUsernameUnique) {
            System.out.print("Enter Your User Name: ");
            String userName = scanner.nextLine();

            boolean isDuplicate = bankUsers.stream().anyMatch(u -> u.getName().equals(userName));
            if (isDuplicate) {
                System.out.println("Username already exists. Please choose a different one.");
            } else {
                isUsernameUnique = true; // Break the loop when a unique username is provided

                System.out.print("Enter Your Phone Number: ");
                String phoneNumber = scanner.nextLine();

                System.out.print("Enter Your Password: ");
                String password = scanner.nextLine();

                System.out.print("Enter Your Account Number: ");
                String bankAccountNum = scanner.nextLine();

                if (facade != null) {
                    boolean isVerified = facade.verifyUser(bankAccountNum, phoneNumber, "", true);

                    if (!isVerified) {
                        System.out.println("Verification failed. Bank Account User not created.");
                        return; // Exit the signup process if verification fails
                    }
                } else {
                    System.out.println("Facade is not available to verify user.");
                    return; // Exit the signup process if verification cannot be performed
                }

                // If verification passes, proceed with user creation
                BankAccountUser newUser = new BankAccountUser(userName, phoneNumber, password, bankAccountNum);
                bankUsers.add(newUser);

                // Set the current user to the newly signed-up user
                setCurrentUser(newUser);

                System.out.println("Bank Account User signed up and verified successfully!");
            }
        }
    }



    @Override
    public boolean authenticate(String username, String password) {
        int attempts = 0;
        while (attempts < 3) { // Allow only 3 attempts
            BankAccountUser authenticatedUser = authenticateUser(username, password);
            if (authenticatedUser != null) {
                setCurrentUser(authenticatedUser);
                System.out.println("Logged in as: " + authenticatedUser.getName());
                return true; // Exit the method after successful authentication
            }
            System.out.println("Invalid username or password");
            attempts++;
        }
        System.out.println("Too many login attempts. Please try again later.");
        return false;
    }



    // Method to authenticate the user based on username and password
    private BankAccountUser authenticateUser(String username, String password) {
        for (BankAccountUser user : bankUsers) {
            if (user.getName().equals(username) && user.getPassword().equals(password)) {
                return user; // Return the authenticated user
            }
        }
        System.out.println("Invalid username or password");
        return null; // Return null if authentication fails
    }

    public void setCurrentUser(BankAccountUser user) {
        this.currentUser = user;
    }

    public List<BankAccountUser> getUsers() {
        return bankUsers;
    }
    @Override
    public BankAccountUser getCurrentUser() {
        return currentUser;
    }

    public UserVerificationFacade getVerificationFacade() {
        return facade;
    }

    public void printBankUsers() {//testing storage purpose
        for (BankAccountUser user : bankUsers) {
            System.out.println("Username: " + user.getName() + ", Phone Number: " + user.getPhonenum() +
                    ", Account Number: " + user.getBankaccountNum());
        }
    }

    // Close the scanner in a controlled manner
    public void closeScanner() {
        scanner.close();
    }

}
