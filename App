public class App {

    private static List<BankAccountUser> bankUsers = new ArrayList<>(); //store multiple instances
    private static List<WalletUser> walletUsers = new ArrayList<>();
    private static BankAccount bankAccount;
    private static WalletAccount walletAccount;
    public static BankAccount authenticatedBankAccount = null;
    public static WalletAccount authenticatedWalletAccount = null;



    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        boolean exitProgram = false;

        while (!exitProgram) {
            System.out.println("Welcome to Instapay! Let's get started.");
            System.out.println("Enter 1 for sign-in");
            System.out.println("Enter 2 for sign-up");
            System.out.println("Enter 3 to exit");

            int choice = scanner.nextInt();


            switch (choice) {
                case 1:
                    signInProcess(scanner);
                    break;
                case 2:
                    signUpProcess(scanner);
                    break;
                case 3:
                    System.out.println("Exiting the program");
                    exitProgram = true;
                    break;
                default:
                    System.out.println("Invalid choice");
                    break;
            }
        }
        scanner.close();
    }


    private static void signInProcess(Scanner scanner) {
        boolean showMainMenu = false;

        while (!showMainMenu) {
            System.out.println("Enter your choice for sign-in:");
            System.out.println("1. Sign in to Bank Account");
            System.out.println("2. Sign in to Wallet Account");
            System.out.println("3. Go back");

            int signInChoice = scanner.nextInt();
            scanner.nextLine(); // Consume newline character

            switch (signInChoice) {
                case 1:
                    signInToBankAccount(scanner);
                    // showMainMenu(scanner, authenticatedBankAccount, null);
                    break;
                case 2:
                    signInToWalletAccount(scanner);
                    // showMainMenu(scanner, null, authenticatedWalletAccount);
                    break;
                case 3:
                    return;
                default:
                    System.out.println("Invalid sign-in choice");
            }
        }
    }

    private static void signInToBankAccount(Scanner scanner) {
        System.out.print("Enter Bank Account Username: ");
        String username = scanner.nextLine();

        System.out.print("Enter Bank Account Password: ");
        String password = scanner.nextLine();

        // Compare username and password with the bank account data
        for (BankAccountUser bankUser : bankUsers) {
            if (bankUser.getName().equals(username) && bankUser.getPassword().equals(password)) {
                // Assuming 'bankAccount' is the existing instance of the authenticated bank account
                authenticatedBankAccount = bankAccount;
                System.out.println("Logged in to Bank Account as: " + username);
                showMainMenu(scanner, authenticatedBankAccount, null); // Show bank menu
                return; // Exit the method after successful authentication
            }
        }
        System.out.println("Invalid username or password for Bank Account");
    }


    private static void signInToWalletAccount(Scanner scanner) {
        System.out.print("Enter Wallet Account Username: ");
        String username = scanner.nextLine();

        System.out.print("Enter Wallet Account Password: ");
        String password = scanner.nextLine();

        // Compare username and password with the wallet account data
        for (WalletUser walletUser : walletUsers) {
            if (walletUser.getName().equals(username) && walletUser.getPassword().equals(password)) {

                authenticatedWalletAccount = walletAccount;
                System.out.println("Logged in to Wallet Account as: " + username);
                showMainMenu(scanner, null, authenticatedWalletAccount); // Show wallet menu
                return; // Exit the method after successful authentication
            }
        }
        System.out.println("Invalid username or password for Wallet Account");
    }


    private static void signUpProcess(Scanner scanner) {
        System.out.println("Select an option:");
        System.out.println("1. Create Bank Account");
        System.out.println("2. Create Wallet Account");

        int signUpChoice = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character after reading the integer input


        switch (signUpChoice) {
            case 1:
                bankAccount = new BankAccount(bankUsers);
                bankAccount.setVerificationFacade(new UserVerificationFacade(
                        new BankAPI(),
                        new WalletAPI(),
                        new OTPService(),
                        new OTPGenerator()
                ));
                bankAccount.signup();
                // bankAccounts.add(bankAccount); // Store the created instance
                // bankAccount.printBankUsers();
                break;
            case 2:
                walletAccount = new WalletAccount(walletUsers);
                walletAccount.setVerificationFacade(new UserVerificationFacade(
                        new BankAPI(),
                        new WalletAPI(),
                        new OTPService(),
                        new OTPGenerator()
                ));
                walletAccount.signup();
                // walletAccounts.add(walletAccount); // Store the created instance
                break;
            default:
                System.out.println("Invalid choice");
        }
    }


    private static void showMainMenu(Scanner scanner, BankAccount bankAccount, WalletAccount walletAccount) {
        boolean showMenu = true;

        while (showMenu) {
            System.out.println("Choose an option:");
            System.out.println("1. Transfer to Wallet using the mobile number");
            System.out.println("2. Transfer to Bank account");
            System.out.println("3. Transfer to Another Instapay account");
            System.out.println("4. Inquire about your balance");
            System.out.println("5. Pay bills");
            System.out.println("6. Exit profile");

            int choice;
            try {
                choice = scanner.nextInt();
            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please enter a number.");
                scanner.nextLine(); // Clear the invalid input from the scanner
                continue; // Restart the loop
            }

            switch (choice) {
                case 1:
                    if (walletAccount != null) {
                        Transfer walletTransfer = new TransferFactory().createTransferToWalletUsers(TransferType.WALLET, walletAccount);
                        walletTransfer.execute();
                    } else if (bankAccount != null) {
                        Transfer walletTransfer = new TransferFactory().createTransferToBankUsers(TransferType.WALLET, bankAccount);
                        walletTransfer.execute();
                    } else {
                        System.out.println("Wallet transfer not available.");
                    }
                    break;
                case 2:
                    if (bankAccount != null) {
                        Transfer bankTransfer = new TransferFactory().createTransferToBankUsers(TransferType.BANK, bankAccount);
                        bankTransfer.execute();
                    } else {
                        System.out.println("Bank transfer not available.");
                    }
                    break;
                case 3:
                    if (bankAccount != null) {
                        Transfer instapayTransfer = new TransferFactory().createTransferToBankUsers(TransferType.INSTAPAY, bankAccount);
                        instapayTransfer.execute();
                    } else if (walletAccount != null) {
                        Transfer instapayTransfer = new TransferFactory().createTransferToWalletUsers(TransferType.INSTAPAY, walletAccount);
                        instapayTransfer.execute();
                    } else {
                        System.out.println("Instapay transfer not available.");
                    }
                    break;
                case 4:
                    if (bankAccount != null) {
                        BalanceInquiry balanceInquiry = new BalanceInquiry();
                        balanceInquiry.checkBalance(bankAccount.getCurrentUser());
                    } else if (walletAccount != null) {
                        BalanceInquiry balanceInquiry = new BalanceInquiry();
                        balanceInquiry.checkBalance(walletAccount.getCurrentUser());
                    } else {
                        System.out.println("Balance inquiry not available.");
                    }
                    break;
                case 5:
                    payBills(scanner);
                case 6:
                    return;
                default:
                    System.out.println("Invalid choice");
            }
        }
    }


    private static void payBills(Scanner scanner) {
        boolean showBillMenu = true;

        while (showBillMenu) {
            System.out.println("Choose a bill to pay:");
            System.out.println("1. Gas bill");
            System.out.println("2. Electricity bill");
            System.out.println("3. Water bill");
            System.out.println("4. Exit bill payment");

            int billChoice = scanner.nextInt();
            UtilityBill bill = null;

            switch (billChoice) {
                case 1:
                    bill = new TransferFactory().createBill(BillType.GAS);
                    break;
                case 2:
                    bill = new TransferFactory().createBill(BillType.ELECTRICITY);
                    break;
                case 3:
                    bill = new TransferFactory().createBill(BillType.WATER);
                    break;
                case 4:
                    return;
                default:
                    System.out.println("Invalid choice");
                    break;
            }

            if (bill != null) {
                bill.createBill();
            }
        }
    }
}
